{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Vault Token Monitoring Server \u00b6 vault-token-monitor is a monitoring server that can expose your Vault accessor tokens TTL as prometheus metrics where you can build dashboards and alert policies. Moreover vault-token-monitor can also auto-renew token when the TTL is bellowed configurable thresholds. Features \u00b6 Lookup and expose Vault token TTL as prometheus metrics Auto Renew tokens when TTL is below threshold Sample Grafana Dashboards","title":"Home"},{"location":"#vault-token-monitoring-server","text":"vault-token-monitor is a monitoring server that can expose your Vault accessor tokens TTL as prometheus metrics where you can build dashboards and alert policies. Moreover vault-token-monitor can also auto-renew token when the TTL is bellowed configurable thresholds.","title":"Vault Token Monitoring Server"},{"location":"#features","text":"Lookup and expose Vault token TTL as prometheus metrics Auto Renew tokens when TTL is below threshold Sample Grafana Dashboards","title":"Features"},{"location":"changelog/","text":"Changelog \u00b6 Check the generated CHANGELOG.md from the Github repo","title":"Changelog"},{"location":"changelog/#changelog","text":"Check the generated CHANGELOG.md from the Github repo","title":"Changelog"},{"location":"config/","text":"Server Configuration \u00b6 You can find a complete example of the client configuration in example/config.yaml . Sample Config \u00b6 --- ## ## Vault Config ## ### The Vault API Address ### (mandatory) vault_address : \"http://127.0.0.1:8200\" ### Vault Token ### having the permission to lookupand renew other ### accessor tokens ### (mandatory) vault_token : \"hvs.CAESINEj-...\" ### TLS Setting (optional) ### Default false # skip_tls_validation: true ### Path to a PEM encoded CA file # vault_ca_pem_file: /path/to/ca.pem ## ## Prometheus ## ### Listening port ### (mandatory) prometheus_listening_port : 9000 ## ## Scheduler ## ### Period duration at which the scheduler ### will lookup token to check for TTL, and ### for auto renew threshold. ### ### ### Allowed Unit format for duration \"s\", \"m\", \"h\". ### (mandatory) scheduler_period_duration : 1m ## ## Vault Accessor Token list ## ### (mandatory) vault_accessor_token_list : ## A Vault token accessor to monitor ## (mandatory) - token_accessor : \"T1hr2GKaWgNrriLQLsQRuf1d\" ## A Vault token accessor to monitor ## and to renew when TTL of token is lower than ## the auto_renew_threshold_duration: ### Allowed Unit format for duration \"s\", \"m\", \"h\". ## (optional) - token_accessor : \"F3JwTAZeuAH5KoOdxEXTWwIT\" auto_renew_threshold_duration : 3m Vault Config \u00b6 Important Mandatory Configuration settings Vault Address \u00b6 The Vault API address of your Vault Server. vault_address : \"http://127.0.0.1:8200\" Vault Token \u00b6 The Vault token used to authenticate to your Vault Server, and lookup and renew other accessor token. ### Vault Token ### having the permission to lookupand renew other ### accessor tokens ### (mandatory) vault_token : \"hvs.CAESINEj-...\" Here is an example of a Hashicorp Vault policy ( global/automated-token-renew ) for that token: ## Allow tokens to look up their own properties ## for vault cli login path \"auth/token/lookup-self\" { capabilities = [\"read\"] } ## Allow list of accessors token path \"/auth/token/accessors\" { capabilities = [ \"read\", \"list\"] } ## Allow accessor tokens lookup path \"/auth/token/lookup-accessor\" { capabilities = [ \"read\", \"update\"] } ## Allow renew of accessors token path \"/auth/token/renew-accessor\" { capabilities = [ \"read\", \"update\"] } You can generate the token as a periodic and orphan token with: vault token create -policy = global/automated-token-renew -no-default-policy -orphan -period = 24h TLS Configuration \u00b6 Info Optional settings If your Vault Server is using self-signed certificates or a non public Root CA, you can use one of those settings: ### TLS Setting (optional) ### Default false skip_tls_validation : true ### Path to a PEM encoded CA file vault_ca_pem_file : /path/to/ca.pem Prometheus Metric Server \u00b6 Important Mandatory setting ## ## Prometheus ## ### Listening port ### (mandatory) prometheus_listening_port : 9000 Scheduler Period \u00b6 Important Mandatory setting The monitoring server will lookup the configured Vault accessor token at this frequency. ## ## Scheduler ## ### Period duration at which the scheduler ### will lookup token to check for TTL, and ### for auto renew threshold. ### ### ### Allowed Unit format for duration \"s\", \"m\", \"h\". ### (mandatory) scheduler_period_duration : 4h Vault Accessor Token List \u00b6 Important Mandatory setting This is where you can define Vault accessor tokens to be monitored. The scheduler will lookup the access token's TTL at the configured ( scheduler_period_duration ) frequency, and update the prometheus metric to reflect the TTL expiration time. Additionally, you can configure an auto renew threshold ( auto_renew_threshold_duration ) for the accessor token. If the accessor token TTL is lower than the configured threshold then the monitoring server will renew the token. ## ## Vault Accessor Token list ## ### (mandatory) vault_accessor_token_list : ## A Vault token accessor to monitor ## (mandatory) - token_accessor : \"T1hr2GKaWgNrriLQLsQRuf1d\" ## A Vault token accessor to monitor ## and to renew when TTL of token is lower than ## the auto_renew_threshold_duration: ### Allowed Unit format for duration \"s\", \"m\", \"h\". ## (optional) - token_accessor : \"F3JwTAZeuAH5KoOdxEXTWwIT\" auto_renew_threshold_duration : 24h Warning Make sure that your auto_renew_threshold_duration are greater than the scheduler_period_duration","title":"Server Configuration"},{"location":"config/#server-configuration","text":"You can find a complete example of the client configuration in example/config.yaml .","title":"Server Configuration"},{"location":"config/#sample-config","text":"--- ## ## Vault Config ## ### The Vault API Address ### (mandatory) vault_address : \"http://127.0.0.1:8200\" ### Vault Token ### having the permission to lookupand renew other ### accessor tokens ### (mandatory) vault_token : \"hvs.CAESINEj-...\" ### TLS Setting (optional) ### Default false # skip_tls_validation: true ### Path to a PEM encoded CA file # vault_ca_pem_file: /path/to/ca.pem ## ## Prometheus ## ### Listening port ### (mandatory) prometheus_listening_port : 9000 ## ## Scheduler ## ### Period duration at which the scheduler ### will lookup token to check for TTL, and ### for auto renew threshold. ### ### ### Allowed Unit format for duration \"s\", \"m\", \"h\". ### (mandatory) scheduler_period_duration : 1m ## ## Vault Accessor Token list ## ### (mandatory) vault_accessor_token_list : ## A Vault token accessor to monitor ## (mandatory) - token_accessor : \"T1hr2GKaWgNrriLQLsQRuf1d\" ## A Vault token accessor to monitor ## and to renew when TTL of token is lower than ## the auto_renew_threshold_duration: ### Allowed Unit format for duration \"s\", \"m\", \"h\". ## (optional) - token_accessor : \"F3JwTAZeuAH5KoOdxEXTWwIT\" auto_renew_threshold_duration : 3m","title":"Sample Config"},{"location":"config/#vault-config","text":"Important Mandatory Configuration settings","title":"Vault Config"},{"location":"config/#vault-address","text":"The Vault API address of your Vault Server. vault_address : \"http://127.0.0.1:8200\"","title":"Vault Address"},{"location":"config/#vault-token","text":"The Vault token used to authenticate to your Vault Server, and lookup and renew other accessor token. ### Vault Token ### having the permission to lookupand renew other ### accessor tokens ### (mandatory) vault_token : \"hvs.CAESINEj-...\" Here is an example of a Hashicorp Vault policy ( global/automated-token-renew ) for that token: ## Allow tokens to look up their own properties ## for vault cli login path \"auth/token/lookup-self\" { capabilities = [\"read\"] } ## Allow list of accessors token path \"/auth/token/accessors\" { capabilities = [ \"read\", \"list\"] } ## Allow accessor tokens lookup path \"/auth/token/lookup-accessor\" { capabilities = [ \"read\", \"update\"] } ## Allow renew of accessors token path \"/auth/token/renew-accessor\" { capabilities = [ \"read\", \"update\"] } You can generate the token as a periodic and orphan token with: vault token create -policy = global/automated-token-renew -no-default-policy -orphan -period = 24h","title":"Vault Token"},{"location":"config/#tls-configuration","text":"Info Optional settings If your Vault Server is using self-signed certificates or a non public Root CA, you can use one of those settings: ### TLS Setting (optional) ### Default false skip_tls_validation : true ### Path to a PEM encoded CA file vault_ca_pem_file : /path/to/ca.pem","title":"TLS Configuration"},{"location":"config/#prometheus-metric-server","text":"Important Mandatory setting ## ## Prometheus ## ### Listening port ### (mandatory) prometheus_listening_port : 9000","title":"Prometheus Metric Server"},{"location":"config/#scheduler-period","text":"Important Mandatory setting The monitoring server will lookup the configured Vault accessor token at this frequency. ## ## Scheduler ## ### Period duration at which the scheduler ### will lookup token to check for TTL, and ### for auto renew threshold. ### ### ### Allowed Unit format for duration \"s\", \"m\", \"h\". ### (mandatory) scheduler_period_duration : 4h","title":"Scheduler Period"},{"location":"config/#vault-accessor-token-list","text":"Important Mandatory setting This is where you can define Vault accessor tokens to be monitored. The scheduler will lookup the access token's TTL at the configured ( scheduler_period_duration ) frequency, and update the prometheus metric to reflect the TTL expiration time. Additionally, you can configure an auto renew threshold ( auto_renew_threshold_duration ) for the accessor token. If the accessor token TTL is lower than the configured threshold then the monitoring server will renew the token. ## ## Vault Accessor Token list ## ### (mandatory) vault_accessor_token_list : ## A Vault token accessor to monitor ## (mandatory) - token_accessor : \"T1hr2GKaWgNrriLQLsQRuf1d\" ## A Vault token accessor to monitor ## and to renew when TTL of token is lower than ## the auto_renew_threshold_duration: ### Allowed Unit format for duration \"s\", \"m\", \"h\". ## (optional) - token_accessor : \"F3JwTAZeuAH5KoOdxEXTWwIT\" auto_renew_threshold_duration : 24h Warning Make sure that your auto_renew_threshold_duration are greater than the scheduler_period_duration","title":"Vault Accessor Token List"},{"location":"dashboards/","text":"Dashboards \u00b6 Grafana Sample Dashboards \u00b6 Dashboards' configuration can be found on the tutorial/grafana-terraform-config/dashboards/ directory.","title":"Dashboards"},{"location":"dashboards/#dashboards","text":"","title":"Dashboards"},{"location":"dashboards/#grafana-sample-dashboards","text":"Dashboards' configuration can be found on the tutorial/grafana-terraform-config/dashboards/ directory.","title":"Grafana Sample Dashboards"},{"location":"install/","text":"Install \u00b6 You can find the pre-compiled binaries on the release page https://github.com/vdbulcke/vault-token-monitor/releases Getting Latest Version \u00b6 TAG = $( curl https://api.github.com/repos/vdbulcke/vault-token-monitor/releases/latest | jq .tag_name -r ) VERSION = $( echo $TAG | cut -d 'v' -f 2 ) Info You will need jq and curl in your PATH Docker \u00b6 See the Packages Page to find the latest docker image. docker run --rm -v /path/to/your/config.yaml:/app/config.yaml:z -p 9000 :9000 ghcr.io/vdbulcke/vault-token-monitor:v ${ TAG } MacOS \u00b6 Intel ARM (M1) Universal Binary Download the binary from the releases page: curl -LO \"https://github.com/vdbulcke/vault-token-monitor/releases/download/ ${ TAG } /vault-token-monitor_ ${ VERSION } _Darwin_x86_64.tar.gz\" Extract Binary: tar xzf \"vault-token-monitor_ ${ VERSION } _Darwin_x86_64.tar.gz\" Check Version: ./vault-token-monitor version Install in your PATH : sudo install vault-token-monitor /usr/local/bin/ Or sudo mv vault-token-monitor /usr/local/bin/ Download the binary from the releases page: curl -LO \"https://github.com/vdbulcke/vault-token-monitor/releases/download/ ${ TAG } /vault-token-monitor_ ${ VERSION } _Darwin_amr64.tar.gz\" Extract Binary: tar xzf \"vault-token-monitor_ ${ VERSION } _Darwin_amr64.tar.gz\" Check Version: ./vault-token-monitor version Install in your PATH : sudo install vault-token-monitor /usr/local/bin/ Or sudo mv vault-token-monitor /usr/local/bin/ Download the binary from the releases page: curl -LO \"https://github.com/vdbulcke/vault-token-monitor/releases/download/ ${ TAG } /vault-token-monitor_ ${ VERSION } _Darwin_all.tar.gz\" Extract Binary: tar xzf \"vault-token-monitor_ ${ VERSION } _Darwin_all.tar.gz\" Check Version: ./vault-token-monitor version Install in your PATH : sudo install vault-token-monitor /usr/local/bin/ Or sudo mv vault-token-monitor /usr/local/bin/ Linux \u00b6 Intel ARM Download the binary from the releases page: curl -LO \"https://github.com/vdbulcke/vault-token-monitor/releases/download/ ${ TAG } /vault-token-monitor_ ${ VERSION } _Linux_x86_64.tar.gz\" Extract Binary: tar xzf \"vault-token-monitor_ ${ VERSION } _Linux_x86_64.tar.gz\" Check Version: ./vault-token-monitor version Install in your PATH : sudo install vault-token-monitor /usr/local/bin/ Or sudo mv vault-token-monitor /usr/local/bin/ Download the binary from the releases page: curl -LO \"https://github.com/vdbulcke/vault-token-monitor/releases/download/ ${ TAG } /vault-token-monitor_ ${ VERSION } _Linux_amr64.tar.gz\" Extract Binary: tar xzf \"vault-token-monitor_ ${ VERSION } _Linux_amr64.tar.gz\" Check Version: ./vault-token-monitor version Install in your PATH : sudo install vault-token-monitor /usr/local/bin/ Or sudo mv vault-token-monitor /usr/local/bin/ Windows \u00b6 Intel Download the binary vault-token-monitor_[VERSION]_Windows_x86_64.zip from the releases page Unzip the Binary Check Version: ./vault-token-monitor.exe version","title":"Install"},{"location":"install/#install","text":"You can find the pre-compiled binaries on the release page https://github.com/vdbulcke/vault-token-monitor/releases","title":"Install"},{"location":"install/#getting-latest-version","text":"TAG = $( curl https://api.github.com/repos/vdbulcke/vault-token-monitor/releases/latest | jq .tag_name -r ) VERSION = $( echo $TAG | cut -d 'v' -f 2 ) Info You will need jq and curl in your PATH","title":"Getting Latest Version"},{"location":"install/#docker","text":"See the Packages Page to find the latest docker image. docker run --rm -v /path/to/your/config.yaml:/app/config.yaml:z -p 9000 :9000 ghcr.io/vdbulcke/vault-token-monitor:v ${ TAG }","title":"Docker"},{"location":"install/#macos","text":"Intel ARM (M1) Universal Binary Download the binary from the releases page: curl -LO \"https://github.com/vdbulcke/vault-token-monitor/releases/download/ ${ TAG } /vault-token-monitor_ ${ VERSION } _Darwin_x86_64.tar.gz\" Extract Binary: tar xzf \"vault-token-monitor_ ${ VERSION } _Darwin_x86_64.tar.gz\" Check Version: ./vault-token-monitor version Install in your PATH : sudo install vault-token-monitor /usr/local/bin/ Or sudo mv vault-token-monitor /usr/local/bin/ Download the binary from the releases page: curl -LO \"https://github.com/vdbulcke/vault-token-monitor/releases/download/ ${ TAG } /vault-token-monitor_ ${ VERSION } _Darwin_amr64.tar.gz\" Extract Binary: tar xzf \"vault-token-monitor_ ${ VERSION } _Darwin_amr64.tar.gz\" Check Version: ./vault-token-monitor version Install in your PATH : sudo install vault-token-monitor /usr/local/bin/ Or sudo mv vault-token-monitor /usr/local/bin/ Download the binary from the releases page: curl -LO \"https://github.com/vdbulcke/vault-token-monitor/releases/download/ ${ TAG } /vault-token-monitor_ ${ VERSION } _Darwin_all.tar.gz\" Extract Binary: tar xzf \"vault-token-monitor_ ${ VERSION } _Darwin_all.tar.gz\" Check Version: ./vault-token-monitor version Install in your PATH : sudo install vault-token-monitor /usr/local/bin/ Or sudo mv vault-token-monitor /usr/local/bin/","title":"MacOS"},{"location":"install/#linux","text":"Intel ARM Download the binary from the releases page: curl -LO \"https://github.com/vdbulcke/vault-token-monitor/releases/download/ ${ TAG } /vault-token-monitor_ ${ VERSION } _Linux_x86_64.tar.gz\" Extract Binary: tar xzf \"vault-token-monitor_ ${ VERSION } _Linux_x86_64.tar.gz\" Check Version: ./vault-token-monitor version Install in your PATH : sudo install vault-token-monitor /usr/local/bin/ Or sudo mv vault-token-monitor /usr/local/bin/ Download the binary from the releases page: curl -LO \"https://github.com/vdbulcke/vault-token-monitor/releases/download/ ${ TAG } /vault-token-monitor_ ${ VERSION } _Linux_amr64.tar.gz\" Extract Binary: tar xzf \"vault-token-monitor_ ${ VERSION } _Linux_amr64.tar.gz\" Check Version: ./vault-token-monitor version Install in your PATH : sudo install vault-token-monitor /usr/local/bin/ Or sudo mv vault-token-monitor /usr/local/bin/","title":"Linux"},{"location":"install/#windows","text":"Intel Download the binary vault-token-monitor_[VERSION]_Windows_x86_64.zip from the releases page Unzip the Binary Check Version: ./vault-token-monitor.exe version","title":"Windows"},{"location":"contributing/contributing/","text":"Contributing \u00b6 Look at CONTRIBUTING.md at the root of the Github repo .","title":"Contributing"},{"location":"contributing/contributing/#contributing","text":"Look at CONTRIBUTING.md at the root of the Github repo .","title":"Contributing"},{"location":"contributing/git/","text":"Git \u00b6 Commit Pattern \u00b6 Commit message template: <type>: <subject> <BLANK LINE> <body> <BLANK LINE> <footer> Use the following type for your commit messages: docs: for commit related to documentation change feat: for commit related to a new feature, also add a reference to the Github issue in the subject fix: for commit related to a bug fix, also add a reference to the Github issue in the subject Use the following type for commits that should not appear in changelog or release note uses: test: for test typo: for fixing typo ignore: for everything else Breaking Change or Note \u00b6 Mention BREAKING CHANGE: or NOTE: in the footer . Use rebase before submitting Pull Request \u00b6 Make sure to rebase you commits (on your feature branch) first so that the git log follows the patterns mentioned above. git rebase -i","title":"Git"},{"location":"contributing/git/#git","text":"","title":"Git"},{"location":"contributing/git/#commit-pattern","text":"Commit message template: <type>: <subject> <BLANK LINE> <body> <BLANK LINE> <footer> Use the following type for your commit messages: docs: for commit related to documentation change feat: for commit related to a new feature, also add a reference to the Github issue in the subject fix: for commit related to a bug fix, also add a reference to the Github issue in the subject Use the following type for commits that should not appear in changelog or release note uses: test: for test typo: for fixing typo ignore: for everything else","title":"Commit Pattern"},{"location":"contributing/git/#breaking-change-or-note","text":"Mention BREAKING CHANGE: or NOTE: in the footer .","title":"Breaking Change or Note"},{"location":"contributing/git/#use-rebase-before-submitting-pull-request","text":"Make sure to rebase you commits (on your feature branch) first so that the git log follows the patterns mentioned above. git rebase -i","title":"Use rebase before submitting Pull Request"},{"location":"contributing/tooling/","text":"Tooling \u00b6 Release: goreleaser \u00b6 Goreleaser is used for building, packaging, and releasing new version of the software. Info See section \"Git\" for more details about git commit message Making Local Snapshot Build \u00b6 make build-snapshot Or goreleaser build --rm-dist --snapshot --single-target Testing Pre-release \u00b6 make release-skip-publish Or goreleaser release --rm-dist --skip-publish Vulnerability Scanning \u00b6 nancy is used for dependency scanning. make scan Linting \u00b6 golangci-lint is used for code linting. make lint Changelog Generator \u00b6 git-chglog is used for Changelog generation make changelog Info See section \"Git\" for more details about git commit message Documentation \u00b6 MkDocs is used for generating the documentation.","title":"Tooling"},{"location":"contributing/tooling/#tooling","text":"","title":"Tooling"},{"location":"contributing/tooling/#release-goreleaser","text":"Goreleaser is used for building, packaging, and releasing new version of the software. Info See section \"Git\" for more details about git commit message","title":"Release: goreleaser"},{"location":"contributing/tooling/#making-local-snapshot-build","text":"make build-snapshot Or goreleaser build --rm-dist --snapshot --single-target","title":"Making Local Snapshot Build"},{"location":"contributing/tooling/#testing-pre-release","text":"make release-skip-publish Or goreleaser release --rm-dist --skip-publish","title":"Testing Pre-release"},{"location":"contributing/tooling/#vulnerability-scanning","text":"nancy is used for dependency scanning. make scan","title":"Vulnerability Scanning"},{"location":"contributing/tooling/#linting","text":"golangci-lint is used for code linting. make lint","title":"Linting"},{"location":"contributing/tooling/#changelog-generator","text":"git-chglog is used for Changelog generation make changelog Info See section \"Git\" for more details about git commit message","title":"Changelog Generator"},{"location":"contributing/tooling/#documentation","text":"MkDocs is used for generating the documentation.","title":"Documentation"}]}